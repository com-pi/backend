plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
}

ext {
	springCloudVersion = '2023.0.1'
	dockerRepo = 'utopiandrmer'
	projectComP = 'comp'
}

bootJar {
	enabled = false
}

jar {
	enabled = false
}

tasks.register('buildAllImages') {
	dependsOn ':api-gateway:bootBuildImage'
	dependsOn ':auth-service:bootBuildImage'
	dependsOn ':encyclo-service:bootBuildImage'
	dependsOn ':my-plant:bootBuildImage'
	dependsOn ':board-service:bootBuildImage'
	dependsOn ':discovery-eureka:bootBuildImage'
}

subprojects {
	group = 'com.comp'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	// 모듈 공통 의존성
	dependencies {
		// lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// spring boot 기본 설정
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		// actuator
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	test {
		useJUnitPlatform()
	}

	wrapper {
		gradleVersion = '8.7'
	}

	jar {
		enabled = false
	}

	tasks.register('cleanOut', Delete) {
		delete "${projectDir}/out"
	}

	bootBuildImage {
		def tag = findProperty('tag')
		if (tag == null || tag.trim().isEmpty()) {
			throw new GradleException("이미지 태그 설정이 필요합니다. -Ptag 옵션을 추가하여 빌드")
		}
		imageName = "${dockerRepo}/${projectComP}-${project.name}:${tag}"
		builder = 'paketobuildpacks/builder:base'
	}
}

project(':api-gateway') {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

		// 통합 swagger 관리
		implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'

		// feign client
		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

		// jwt
		implementation 'com.auth0:java-jwt:4.4.0'

		testImplementation 'io.projectreactor:reactor-test'
	}
}

// 각 서비스의 주소(포트) 를 등록하고 로드밸런싱을 해주는 서비스 입니다.
project(':discovery-eureka') {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	}
}

project(':board-service') {
	dependencies {
		implementation project(":image-module")
		implementation project(":common")
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-validation'

		// Discovery 클라이언트
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

		// Geometry data 의존성
		implementation 'org.locationtech.jts:jts-core:1.19.0'
		implementation 'org.hibernate.orm:hibernate-spatial'

		// minio
		implementation 'io.minio:minio:8.5.10'

		// swagger 3.0
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

		// mysql 설정
		implementation 'com.mysql:mysql-connector-j'

		runtimeOnly 'com.h2database:h2'
	}
}


project(':my-plant'){
	dependencies {
		implementation project(":image-module")
		implementation project(":common")
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-validation'

		// swagger 3.0
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

		// Discovery 클라이언트
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

		// mysql 설정
		implementation 'com.mysql:mysql-connector-j'
		// h2
		runtimeOnly 'com.h2database:h2'
	}
}

project(':auth-service') {
	dependencies {
		implementation project(":common")
		implementation project(":image-module")
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-mail'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

		// kafka
		implementation 'org.springframework.kafka:spring-kafka'

		// Geometry data 의존성
		implementation 'org.locationtech.jts:jts-core:1.19.0'
		implementation 'org.hibernate.orm:hibernate-spatial:6.4.4.Final'

		// minio
		implementation 'io.minio:minio:8.5.10'

		// feign
		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

		// mysql 설정
		implementation 'com.mysql:mysql-connector-j'

		// 암호화 도구
		implementation 'org.springframework.security:spring-security-crypto:6.2.4'

		// jwt
		implementation 'com.auth0:java-jwt:4.4.0'

		// swagger 3.0
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

		// h2
		runtimeOnly 'com.h2database:h2'
		testImplementation 'org.springframework.kafka:spring-kafka-test'
	}
}

project(':encyclo-service'){
	dependencies {
		implementation project(":common")
		implementation project(":image-module")
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

		// minio
		implementation 'io.minio:minio:8.5.10'

		// feign
		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

		// mysql 설정
		implementation 'com.mysql:mysql-connector-j'

		// jwt
		implementation 'com.auth0:java-jwt:4.4.0'

		// swagger 3.0
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

		// h2
		runtimeOnly 'com.h2database:h2'

		//  통합 테스트 시 테스트 컨테이너 띄울 목적으로 추가 하였는데, 추후 추가
//		testImplementation 'org.testcontainers:testcontainers:1.19.8'
//		testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
//		testImplementation 'org.testcontainers:mysql:1.19.8'
//		testImplementation 'org.testcontainers:mongodb:1.19.8'
//		implementation 'org.testcontainers:jdbc:1.19.8'
	}
}


project(':common') {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.locationtech.jts:jts-core:1.19.0'
	}
	bootJar {
		enabled = false
	}
	jar {
		enabled = true
	}
}

project(':image-module') {
	dependencies {
		implementation project(":common")
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'io.minio:minio:8.5.10'
		implementation 'net.coobird:thumbnailator:0.4.20'
	}
	bootJar {
		enabled = false
	}
	jar {
		enabled = true
	}
}
